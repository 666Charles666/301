import java.util.List;

public class controller {
    int sizeShop = 10;
    JewelleryShop shop = new JewelleryShop(sizeShop);

    /**
     * add new tray in JS class
     * @param caseNum
     */
    public void addTray(int caseNum){
        // Find the corresponding Case
        Case selectedCase = null;
        for (List<Case> caseList : shop.cases) {
            for (Case cases : caseList) {
                if (cases.getCaseNum() == caseNum) {
                    selectedCase = cases;
                    break;
                }
            }
        }
        // If a matching Case is found, a new Tray is created and added to that Case
        if (selectedCase != null) {
            Tray newTray = new Tray(1,"defaultInlay","defaultMaterial","defaultColor",0,0,selectedCase);
            selectedCase.addJewellery(newTray, "defaultType", "defaultLighting");
            System.out.println("Tray added successfully to case " + caseNum);
        } else {
            System.out.println("This case Num is invalid.");
        }
    }


    /**
     * search jewelry
     * @param id
     */
    public void jewelrySearch(String id){
        char caseChar = id.charAt(0);
        int trayNumber = Integer.parseInt(id.substring(1, 3));
        int jewelleryNumber = Integer.parseInt(id.substring(3));
        Case selectedCase = null;
        for (List<Case> caseList : shop.cases) {
            for (Case cases : caseList) {
                if (cases.getTrayIdentifier() == caseChar) {
                    selectedCase = cases;
                    
                }
            }
        }
        String result = caseChar + String.format("%02d", trayNumber);
        Tray selectedTray = null;
        // Find the corresponding tray in the selected case's trays array
        for (int i = 0; i < selectedCase.getSize(); i++) {
            List<Tray> trayList = selectedCase.trays[i];  // Get the list of trays in this slot
            for (Tray tray : trayList) {
                if (tray.getTrayID().equals(result)){
                    selectedTray = tray;
                }
            }
        }
        Jewellery jewellery = selectedTray.searchByJewelleryID(jewelleryNumber);
        
        if (selectedCase == null||selectedTray == null||jewellery == null){
            System.out.println("Jewelry with this id does not exist");
        }else {
            System.out.println("In the" + selectedCase + "case,the " + trayNumber + "tray, the" + jewelleryNumber + "th jewellery");
        }
    }

    /**
     * display all of elements
     */
    public void displayAll(){

    }

    /**
     * delete jewellery
     * @return
     */
    public boolean deleteJewellery(int casNum,String trayId,String id){
        return false;
    }

    /**
     * add case
     */
    public void addCase(){

    }

    /**
     * add tray in one case
     * @param index
     */
    public void addTray(char index){


    }

    /**
     * add jewellery in one tray
     * @param index
     */
    public void addJewellery(String index){

    }

    /**
     * add components information
     * @param casNum
     * @param trayId
     * @param id
     */
    public void addComponents(int casNum,String trayId,String id){

    }

}
